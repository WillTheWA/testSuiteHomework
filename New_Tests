package triangle;

import org.junit.Test;
import static org.junit.Assert.*;

import static triangle.Triangle.Type;
import static triangle.Triangle.Type.*;

/**
 * Test class for the Triangle Lines
 */
public class MutantAdequateTest{
    @Test
    public void TestKillMutants(){
        //Kills mutants based on line 20 of triangle.java
        assertEquals(Triangle.classify(1, 1, 0), INVALID);
        assertEquals(Triangle.classify(0, 1, 1), INVALID);
        assertEquals(Triangle.classify(1, 0, 1), INVALID);
        assertEquals(Triangle.classify(1, 2, 2), ISOSCELES); // Valid triangle
        assertEquals(Triangle.classify(2, 1, 2), ISOSCELES); // Valid triangle
        assertEquals(Triangle.classify(2, 2, 1), ISOSCELES); // Valid triangle
        assertEquals(Triangle.classify(2, 3, 4), SCALENE); // Valid scalene triangle
        assertEquals(Triangle.classify(1, 2, 3), INVALID); // This should be invalid (triangle inequality)
        // a + c == b, which should trigger INVALID in the original code
        assertEquals(Triangle.classify(3, 5, 2), INVALID); // a + c == b, so it should be INVALID

        assertEquals(Triangle.classify(1, 3, 4), INVALID);
    }

    // Test for invalid triangles due to zero or negative side lengths
    @Test
    public void testNegativeSidesWithViolation() {
        assertEquals(Triangle.classify(-1, 1, 3), INVALID);
        assertEquals(Triangle.classify(1, -1, 3), INVALID);
        assertEquals(Triangle.classify(1, 1, -3), INVALID);
    }

    // Test for edge case where side lengths are max int values (boundary test for max input values)
    @Test
    public void testMaxIntBoundary() {
        assertEquals(Triangle.classify(Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE), EQUILATERAL);  // Max side values, equilateral
    }
   

    @Test
    public void testZeroSide() {
        assertEquals(INVALID, Triangle.classify(0, 5, 5)); // zero
    }

    @Test
    public void testIntegerMaxValue() {
        // Testing with Integer.MAX_VALUE
        assertEquals(INVALID, Triangle.classify(Integer.MAX_VALUE, 5, 5));
    }

    @Test
    public void testLargeValidValues() {
        // Large numbers
    assertEquals(SCALENE, Triangle.classify(1000000, 1000001, 1000002));
    }

    @Test
    public void testOverflowCondition() {
        // possible integer overflow in calculations
        assertEquals(INVALID, Triangle.classify(Integer.MAX_VALUE, Integer.MAX_VALUE, 1));
    }

    @Test
    public void testTriangleInequalityEqual() {
        // This tests where a + b = c
        assertEquals(INVALID, Triangle.classify(5, 5, 10));
    }

    @Test
    public void testBooleanOperators() {
        // Targets potential mutations in boolean operators (AND/OR)
        assertEquals(INVALID, Triangle.classify(0, 0, 0)); // Multiple zeros
        assertEquals(EQUILATERAL, Triangle.classify(1, 1, 1)); // Multiple zeros
    }
    
    @Test
    public void testArithmeticOperators() {
        assertEquals(SCALENE, Triangle.classify(2, 3, 4)); // Sum calculations
        assertEquals(INVALID, Triangle.classify(1, 2, 4)); // Sum exactly equals third side + 1
    }

    @Test
    public void testZeroInAllPositions() {
        assertEquals(INVALID, Triangle.classify(5, 0, 5));
        assertEquals(INVALID, Triangle.classify(5, 5, 0));
    }

    @Test
    public void testInequalityPermutations() {
        assertEquals(INVALID, Triangle.classify(5, 10, 5));
        assertEquals(INVALID, Triangle.classify(10, 5, 5));
    }
}
